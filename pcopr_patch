#!/bin/bash

####
#
# Fedora COPR Patch Generation Script
# Paul Moore <paul@paul-moore.com>
#

#
# COMMAND LINE OPTIONS
#
# -h            : help/usage information
#

#
# REPO REQUIREMENTS
#
# > git remote -v
# audit   git://git.infradead.org/users/pcmoore/audit
# fedora  git://git.kernel.org/pub/scm/linux/kernel/git/jwboyer/fedora.git
# linus   git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
# selinux git://git.infradead.org/users/pcmoore/selinux
#

#
# (c) Copyright Red Hat, 2015
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

####
# config

# NOTE: any existing patch files in this directory will be deleted
DIR_PATCHES="patches"

DIR_REPO_SRC=""
DIR_REPO_SRC_FIXES=""

# load any configuration that may exist
[[ -r "pcopr.config" ]] && source ./pcopr.config

####
# functions

function msg() {
	echo -e "$*"
}

function notice() {
	msg ">>> $*"
}

function warn() {
	notice "WARNING: $*"
}

function exit_error() {
	if [[ -z $* ]]; then
		notice "ERROR: unknown error occurred"
	else
		notice "ERROR:" "$*"
	fi
	exit 2
}

function exit_usage() {
	msg "$0: [-h]"
	exit 1
}

function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		exit_error "install \"$1\" and include it in your \$PATH"
	fi
}

function branch_stable() {
	local remote="$1"

	git branch -la | grep "remotes/$remote/stable-" \
		| sort | tail -n1 | sed -e 's/.*remotes\///'
}

function branch_merge() {
	local branch="$1"
	local fix_count=0

	notice "MERGE ${branch^^}"
	if ! git merge --squash "$branch"; then
		notice "FIXING ${branch^^}"
		for i in ../$DIR_REPO_SRC_FIXES/${branch//\//_}-*.patch; do
			if [[ -r "$i" ]]; then
				patch -p1 < "$i" || exit_error
				fix_count=$(($fix_count + 1))
			fi
		done
		[[ $fix_count -eq 0 ]] && exit_error
		git add -A
	fi

	# only commit if there is something to commit
	if [[ -n $(git status --short) ]]; then
		git commit -m "COPR automated squashed merge of $branch" \
			|| exit_error
		patch_count=$((patch_count + 1))
	fi
}

####
# main

# store our current working directory
dir_cwd=$(pwd)

#
# verify dependencies
#

# verify tools
verify_deps git
verify_deps patch
verify_deps sort
verify_deps tail
verify_deps sed

# verify configuration
[[ -z $DIR_PATCHES ]] && exit_error "DIR_PATCHES is not set"
[[ -z $DIR_REPO_SRC ]] && exit_error "DIR_REPO_SRC is not set"
[[ -z $DIR_REPO_SRC_FIXES ]] && exit_error "DIR_REPO_SRC_FIXES is not set"

# verify filesystem
[[ ! -d $dir_cwd/$DIR_PATCHES ]] && exit_error "patch directory does not exist"

#
# option parsing
#

while getopts ":h" opt; do
	case "$opt" in
	h|?)
		exit_usage
		;;
	esac
done

shift $(($OPTIND - 1));
cmd="$1"
shift

#
# generate the patches
#

# track branches/patches with changes
patch_count=0

# jump to upstream repo
cd $DIR_REPO_SRC

# reset upstream repo
notice "RESET"
rm -f $dir_cwd/$DIR_PATCHES/*.patch
git clean -f -d
git checkout --force master || exit_error
git reset --hard || exit_error

# update upstream repo
notice "UPDATE"
git remote update || exit_error
git pull || exit_error

# create copr branch
notice "CREATE COPR BRANCH"
git branch --delete --force copr &> /dev/null # || exit_error
git checkout -b copr -t fedora/rawhide || exit_error

# merge other trees/branches (in order)
branch_merge $(branch_stable "selinux")
branch_merge "selinux/next"
branch_merge $(branch_stable "audit")
branch_merge "audit/next"

# generate patches
notice "GENERATE PATCHES"
git format-patch -o $dir_cwd/$DIR_PATCHES -$patch_count HEAD || exit_error

# jump back to master
git checkout --force master

exit 0

# kate: syntax bash;
