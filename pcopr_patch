#!/bin/bash

####
#
# Fedora COPR Patch Generation Script
# Paul Moore <paul@paul-moore.com>
#
# https://github.com/pcmoore/copr-pkg_scripts
#

#
# (c) Copyright Red Hat, 2015, 2018
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

####
# config

# NOTE: no default config provided, see the pcopr.config file

####
# functions

# hold the merged commits
commits_merged=""

function a_bold() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\033[1m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_red() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\E[31m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_yellow() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\E[33m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_green() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t1 ]]; then
		echo -e "\E[32m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function msg() {
	echo -e "$*"
}

function output() {
	echo -e ">>> $*"
}

function notice() {
	a_bold ">>> $*"
}

function warn() {
	a_red "*** WARNING: $*"
}

function exit_error() {
	if [[ -z $* ]]; then
		a_red "*** ERROR: unknown error occurred"
	else
		a_red "*** ERROR:" "$*"
	fi
	exit 2
}

function exit_usage() {
	msg "$0: [-h] [-c <config_file>] [-x <commit_id>]"
	msg " -c   Use the config file provided instead of pcopr.config"
	msg " -O   Run in offline mode"
	msg " -R   Git reference (commit/tag) to use as the base"
	msg " -x   Exclude the commit, can be used multiple times"
	exit 1
}

function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		exit_error "install \"$1\" and include it in your \$PATH"
	fi
}

function net() {
	local rc=0

	if [[ $opt_offline -eq 1 ]]; then
		# offline
		echo "OFFLINE: $*"
	else
		# online
		$*
		rc=$?
	fi

	return $rc
}

function patch_cmd() {
	[[ -z "$1" ]] && return
	patch -N -p0 -f < "$1" || patch -N -p1 -f < "$1"
	return $?
}

function _commit_subj() {
	local id
	local subj

	[[ -z "$1" || -z "$2" ]] && return

	id=$(git show -s --format="%h" $2)
	subj=$(git show -s --format="%s" $2)
	if [[ ${#subj} -gt $1 ]]; then
		subj=$(echo "$subj" | sed -e 's/^\(.\{'$1'\}\).*/\1\.\.\./')
	fi

	echo "$id (\"$subj\")"
}

function commit_subj() {
	_commit_subj 48 $1
}

function commit_subj_short() {
	_commit_subj 25 $1
}

function branch_tracking() {
	git branch -vv | grep '^*' | \
		sed -e 's/\([^\[]*\[\)//' | \
		sed -e 's/\([^\]]*\)\]\(.*\)/\1/' | \
		sed -e 's/\([^:]*\).*/\1/'
}

function branch_stable() {
	local remote="$1"

	git branch -la | grep "remotes/$remote/stable-" \
		| sort -V | tail -n1 | sed -e 's/.*remotes\///'
}

# TODO: look at merging branch_merge() and branch_merge_submodule()
function branch_merge() {
	local branch="$1"
	local commit_list=""
	local fix_patch=""
	local log_merge="patches-merge.log"
	local log_skip="patches-skip.log"
	local log_msg="patches-msg.log"

	notice "MERGE ${branch^^}"

	# reset the logs
	> $log_merge
	> $log_skip
	> $log_msg

	# build the list of commits from the branch
	local commit_list=""
	for commit in $(git log --format=format:"%H" "$base_ref".."$branch"); do
		local skip=0
		for exclude in $opt_excludes; do
			echo $commit | grep -q $exclude && skip=1
		done
		if [[ $skip -eq 0 ]]; then
			commit_list="$commit $commit_list"
		else
			local subj
			subj="$(commit_subj $commit)"
			output "skip $subj"
			echo "-skip  $subj" \
				| tee -a $dir_cwd/$DIR_PATCHES/CHANGELOG \
				>> $log_skip
		fi
	done

	# return if there is nothing to merge
	if [[ -z $commit_list ]]; then
		output "nothing to merge"
		return
	fi

	# merge the commits
	for i in $commit_list; do
		local subj

		# reformat the subject message
		subj="$(commit_subj $i)"

		# already merged via another branch?
		if echo "$commits_merged" | grep -q "$i"; then
			output "dup $subj"
			continue
		fi

		# test to see if the commit actually has any changes
		git show $i | grep -q "^diff " || continue
		# test to see if the commit has been applied already
		if git show $i | patch -p1 -N --dry-run | \
			grep -q -i "skipping patch"; then
			output "existing $subj"
			continue
		fi

		# display a small notice as a progress indicator
		output "merge $subj"
		echo "+merge $subj" \
			| tee -a $dir_cwd/$DIR_PATCHES/CHANGELOG >> $log_merge

		# apply the commit manually
		git show $i | diffstat -p1
		git show $i | patch -p1
		if [[ $? -ne 0 ]]; then
			notice "FIXING $i"
			# NOTE: patches in the form <remote>_<branch>-<commit>
			fix_patch="$DIR_REPO_SRC_FIXES/${branch//\//_}-$i.patch"
			if [[ -r "../$fix_patch" ]]; then
				patch_cmd "../$fix_patch" || exit_error
				# remove any leftover rejects
				rm $(git ls-files \
					--others --exclude-standard | \
				     grep ".rej$")
			else
				exit_error "missing valid fixes in $fix_patch"
			fi
		fi

		# update our merged commit
		commits_merged+=" $i"
		[[ -n "$(git ls-files --others --exclude-standard)" ]] &&
			git add $(git ls-files --others --exclude-standard)
		git add $(git status --porcelain | 
			  awk '{ print $2 }' |
			  sed -n '/patches-merge\|skip\.log/!p;')
	done

	# only commit if there is something to commit
	if [[ -n $(git status --short) ]]; then
		# create a commit message
		echo "COPR automated merge of $branch" >> $log_msg
		echo "" >> $log_msg
		echo "Automated merge log of $branch:" >> $log_msg
		echo "" >> $log_msg
		cat $log_merge >> $log_msg
		cat $log_skip >> $log_msg

		# do the commit
		git commit -a -m "$(cat $log_msg)" || exit_error
		patch_count=$((patch_count + 1))
	fi
}

# TODO: look at merging branch_merge() and branch_merge_submodule()
function branch_merge_submodule() {
	local submodule="$1"
	local branch="$2"
	local commit_list=""
	local fix_patch=""
	local dir_base="$(pwd)"
	local log_merge="$dir_base/patches-merge.log"
	local log_skip="$dir_base/patches-skip.log"
	local log_msg="$dir_base/patches-msg.log"

	notice "MERGE SUB:${1^^} ${branch^^}"

	# reset the logs
	> $log_merge
	> $log_skip
	> $log_msg

	# move into the submodule
	cd $submodule

	# build the list of commits from the branch
	local commit_list=""
	for commit in $(git log --format=format:"%H" "$base_ref".."$branch"); do
		local skip=0
		for exclude in $opt_excludes; do
			echo $commit | grep -q $exclude && skip=1
		done
		if [[ $skip -eq 0 ]]; then
			commit_list="$commit $commit_list"
		else
			local subj
			subj="$(commit_subj_short $commit)"
			output "skip $subj"
			echo "-skip  $subj" \
				| tee -a $dir_cwd/$DIR_PATCHES/CHANGELOG \
				>> $log_skip
		fi
	done

	# return if there is nothing to merge
	if [[ -z $commit_list ]]; then
		output "nothing to merge"
		cd $dir_base
		return
	fi

	# merge the commits
	for i in $commit_list; do
		local subj

		# reformat the subject message
		subj="$(commit_subj_short $i)"

		# already merged via another branch?
		if echo "$commits_merged" | grep -q "$i"; then
			output "dup $subj"
			continue
		fi

		# test to see if the commit actually has any changes
		git show $i | grep -q "^diff " || continue
		# test to see if the commit has been applied already
		if git show $i | patch -p1 -N --dry-run | \
			grep -q -i "skipping patch"; then
			output "existing $subj"
			continue
		fi

		# display a small notice as a progress indicator
		output "merge $subj"
		echo "+merge (sub:$submodule) $subj" \
			| tee -a $dir_cwd/$DIR_PATCHES/CHANGELOG >> $log_merge

		# apply the commit manually
		git show $i | diffstat -p1
		git show $i | patch -p1
		if [[ $? -ne 0 ]]; then
			notice "FIXING $i"
			# NOTE: patches in the form <remote>_<branch>-<commit>
			fix_patch="$DIR_REPO_SRC_FIXES/${branch//\//_}-$i.patch"
			if [[ -r "../$fix_patch" ]]; then
				patch_cmd "../$fix_patch" || exit_error
				# remove any leftover rejects
				rm $(git ls-files \
					--others --exclude-standard | \
				     grep ".rej$")
			else
				exit_error "missing valid fixes in $fix_patch"
			fi
		fi

		# update our merged commit
		commits_merged+=" $i"
		git add -A
	done

	# return to the base of the repo
	cd $dir_base

	# only commit if there is something to commit
	if [[ -n $(git status --short) ]]; then
		# generate a patch file name
		local patch_file
		patch_file="$dir_cwd/$DIR_PATCHES/"
		patch_file+="0000-COPR-submodule-"
		patch_file+="$(echo $submodule | \
			sed -e 's/\.//g;s/\//_/g;s/^_//;s/__/_/g').patch"

		# create a commit message
		echo "From: $(git config --get user.name)" \
			"<$(git config --get user.email)>"  >> $log_msg
		echo "Date: $(date -R)" >> $log_msg
		echo "Subject: [PATCH] COPR automated merge of" \
			"submodule:$submodule $branch" >> $log_msg
		echo "" >> $log_msg
		echo "Automated merge log of" \
			"submodule:$submodule $branch:" >> $log_msg
		echo "" >> $log_msg
		cat $log_merge >> $log_msg
		cat $log_skip >> $log_msg

		# generate the diffstat/patch
		cat $log_msg > $patch_file
		echo "---" >> $patch_file
		git diff --submodule=diff | diffstat >> $patch_file
		git diff --submodule=diff | sed -n '/^diff/,$p' >> $patch_file
	fi

	# reset the submodule
	(cd $submodule; git reset --hard)
}

####
# main

# store our current working directory
dir_cwd=$(pwd)

#
# verify dependencies
#

# verify tools
verify_deps git
verify_deps patch
verify_deps sort
verify_deps tail
verify_deps sed
verify_deps diffstat
verify_deps tee

#
# option parsing
#

opt_config=""
opt_offline=0
opt_excludes=""
opt_revision_base=

while getopts ":c:OR:x:h" opt; do
	case "$opt" in
	c)
		opt_config="$OPTARG"
		;;
	O)
		opt_offline=1
		;;
	R)
		opt_revision_base="$OPTARG"
		;;
	x)
		opt_excludes+="$OPTARG "
		;;
	h|?)
		exit_usage
		;;
	esac
done

shift $(($OPTIND - 1));
cmd="$1"
shift

#
# load and verify the configuration
#

# load the config
if [[ -n "$opt_config" ]]; then
	[[ ! -r "$opt_config" ]] && exit_error "unable to open config file"
	source "$opt_config"
elif [[ -r "pcopr.config" ]]; then
	source ./pcopr.config
else
	exit_error "unable to find any configuration files"
fi

# config defaults
[[ -z $PATCH_BRANCH_MAIN ]] && PATCH_BRANCH_MAIN="master"

# verify configuration
[[ -z $DIR_PATCHES ]] && exit_error "DIR_PATCHES is not set"
[[ -z $DIR_REPO_SRC ]] && exit_error "DIR_REPO_SRC is not set"
[[ -z $DIR_REPO_SRC_FIXES ]] && exit_error "DIR_REPO_SRC_FIXES is not set"
[[ -z $PATCH_BRANCH_BASE_SRC ]] && exit_error "PATCH_BRANCH_BASE_SRC is not set"
[[ -z $PATCH_BRANCH_LIST ]] && exit_error "PATCH_BRANCH_LIST is not set"

# verify filesystem
[[ ! -d $dir_cwd/$DIR_PATCHES ]] && exit_error "patch directory does not exist"

# add to the exclude list
opt_excludes+="$COMMIT_EXCLUDES"

#
# generate the patches
#

# track branches/patches with changes
patch_count=0

# jump to upstream repo
cd $DIR_REPO_SRC

# git garbage collection
if [[ $DIR_REPO_SRC_GC -eq 1 ]]; then
	notice "REPO GARBAGE COLLECTION"
	git gc
fi

# reset upstream repo
notice "RESET"
rm -f $dir_cwd/$DIR_PATCHES/*.patch
cat /dev/null > $dir_cwd/$DIR_PATCHES/CHANGELOG
git clean -f -d
git submodule foreach git clean -f -d
git checkout --force $PATCH_BRANCH_MAIN || exit_error
git submodule update --force || exit_error
git reset --hard || exit_error

# update upstream repo
notice "UPDATE"
net git remote update || exit_error
for i in $(git remote); do
	git remote prune $i
done
git reset --hard $(branch_tracking) || exit_error

# create copr branch
notice "CREATE COPR BRANCH"
git branch -D copr &> /dev/null
git checkout -b copr -t $PATCH_BRANCH_BASE_SRC || exit_error
base_ref=$PATCH_BRANCH_BASE_SRC

# reset if we targeting a specific commit as the base
if [[ -n "$opt_revision_base" ]]; then
	git reset --hard $opt_revision_base || exit_error
	base_ref=$opt_revision_base
fi

git submodule update --force || exit_error

# merge other trees/branches (in order)
for i in $PATCH_BRANCH_LIST; do
	case "$i" in
	stable:*)
		branch_merge $(branch_stable $(echo ${i#stable:}))
		;;
	submodule:*)
		branch_merge_submodule \
			$(echo "$i" | cut -d':' -f 2) \
			$(echo "$i" | cut -d':' -f 3)
		;;
	*)
		branch_merge "$i"
		;;
	esac
done

# generate patches
notice "GENERATE PATCHES"
ls $dir_cwd/$DIR_PATCHES/0000-COPR-submodule-*.patch 2>/dev/null
git format-patch -o $dir_cwd/$DIR_PATCHES -$patch_count HEAD || exit_error

# jump back to the main branch
git checkout --force $PATCH_BRANCH_MAIN
git submodule update

exit 0

# kate: syntax bash;
