#!/bin/bash

####
#
# Fedora COPR Patch Generation Script
# Paul Moore <paul@paul-moore.com>
#
# https://github.com/pcmoore/copr-pkg_scripts
#

#
# (c) Copyright Red Hat, 2015
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

####
# config

# NOTE: no default config provided, see the pcopr.config file

####
# functions

function a_bold() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\033[1m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_red() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\E[31m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_yellow() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t 1 ]]; then
		echo -e "\E[33m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function a_green() {
	# only display ascii control sequence if stdout is a terminal
	if [[ -t1 ]]; then
		echo -e "\E[32m"$*"\033[0m"
	else
		echo -e "$*"
	fi
}

function msg() {
	echo -e "$*"
}

function output() {
	echo -e ">>> $*"
}

function notice() {
	a_bold ">>> $*"
}

function warn() {
	a_red "*** WARNING: $*"
}

function exit_error() {
	if [[ -z $* ]]; then
		a_red "*** ERROR: unknown error occurred"
	else
		a_red "*** ERROR:" "$*"
	fi
	exit 2
}

function exit_usage() {
	msg "$0: [-h] [-c <config_file>] [-x <commit_id>]"
	msg " -c   Use the config file provided instead of pcopr.config"
	msg " -O   Run in offline mode"
	msg " -x   Exclude the commit, can be used multiple times"
	exit 1
}

function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		exit_error "install \"$1\" and include it in your \$PATH"
	fi
}

function net() {
	local rc=0

	if [[ $opt_offline -eq 1 ]]; then
		# offline
		echo "OFFLINE: $*"
	else
		# online
		$*
		rc=$?
	fi

	return $rc
}

function patch_cmd() {
	[[ -z "$1" ]] && return
	patch -N -p0 -f < "$1" || patch -N -p1 -f < "$1"
	return $?
}

function branch_tracking() {
	git branch -vv | grep '^*' | \
		sed -e 's/.*\[\(.*\).*\].*/\1/' | sed -e 's/\(.*\):.*/\1/'
}

function branch_stable() {
	local remote="$1"

	git branch -la | grep "remotes/$remote/stable-" \
		| sort -V | tail -n1 | sed -e 's/.*remotes\///'
}

function branch_merge() {
	local branch="$1"
	local fix_count=0
	local commit_list=""

	notice "MERGE ${branch^^}"

	# build the list of commits from the branch
	local commit_list=""
	for commit in $(git log --format=format:"%H" "$PATCH_BRANCH_BASE_SRC".."$branch"); do
		local skip=0
		for exclude in $opt_excludes; do
			echo $commit | grep -q $exclude && skip=1
		done
		if [[ $skip -eq 0 ]]; then
			commit_list+="$commit "
		else
			output "skipping $commit"
		fi
	done

	# return if there is nothing to merge
	if [[ -z $commit_list ]]; then
		output "nothing to merge"
		return
	fi

	# merge the commits
	if ! git cherry-pick -n $commit_list; then
		notice "FIXING ${branch^^}"
		# NOTE: patches in the form <remote>_<branch>-<num>
		for i in ../$DIR_REPO_SRC_FIXES/${branch//\//_}-*.patch; do
			if [[ -r "$i" ]]; then
				patch_cmd "$i" || exit_error
				fix_count=$(($fix_count + 1))
			fi
		done
		[[ $fix_count -eq 0 ]] && \
			exit_error "missing valid fixes in $DIR_REPO_SRC_FIXES/${branch//\//_}-*.patch"
		git add -A
	fi

	# only commit if there is something to commit
	if [[ -n $(git status --short) ]]; then
		git commit -m "COPR automated merge of $branch" \
			|| exit_error
		patch_count=$((patch_count + 1))
	fi
}

####
# main

# store our current working directory
dir_cwd=$(pwd)

#
# verify dependencies
#

# verify tools
verify_deps git
verify_deps patch
verify_deps sort
verify_deps tail
verify_deps sed

#
# option parsing
#

opt_config=""
opt_offline=0
opt_excludes=""

while getopts ":c:Ox:h" opt; do
	case "$opt" in
	c)
		opt_config="$OPTARG"
		;;
	O)
		opt_offline=1
		;;
	x)
		opt_excludes+="$OPTARG "
		;;
	h|?)
		exit_usage
		;;
	esac
done

shift $(($OPTIND - 1));
cmd="$1"
shift

#
# load and verify the configuration
#

# load the config
if [[ -n "$opt_config" ]]; then
	[[ ! -r "$opt_config" ]] && exit_error "unable to open config file"
	source "$opt_config"
elif [[ -r "pcopr.config" ]]; then
	source ./pcopr.config
else
	exit_error "unable to find any configuration files"
fi

# verify configuration
[[ -z $DIR_PATCHES ]] && exit_error "DIR_PATCHES is not set"
[[ -z $DIR_REPO_SRC ]] && exit_error "DIR_REPO_SRC is not set"
[[ -z $DIR_REPO_SRC_FIXES ]] && exit_error "DIR_REPO_SRC_FIXES is not set"
[[ -z $PATCH_BRANCH_BASE_SRC ]] && exit_error "PATCH_BRANCH_BASE_SRC is not set"
[[ -z $PATCH_BRANCH_LIST ]] && exit_error "PATCH_BRANCH_LIST is not set"

# verify filesystem
[[ ! -d $dir_cwd/$DIR_PATCHES ]] && exit_error "patch directory does not exist"

# add to the exclude list
opt_excludes+="$COMMIT_EXCLUDES"

#
# generate the patches
#

# track branches/patches with changes
patch_count=0

# jump to upstream repo
cd $DIR_REPO_SRC

# reset upstream repo
notice "RESET"
rm -f $dir_cwd/$DIR_PATCHES/*.patch
git clean -f -d
git checkout --force master || exit_error
git reset --hard || exit_error

# update upstream repo
notice "UPDATE"
net git remote update || exit_error
git reset --hard $(branch_tracking) || exit_error

# create copr branch
notice "CREATE COPR BRANCH"
git branch --delete --force copr &> /dev/null # || exit_error
git checkout -b copr -t $PATCH_BRANCH_BASE_SRC || exit_error

# merge other trees/branches (in order)
for i in $PATCH_BRANCH_LIST; do
	case "$i" in
	stable:*)
		branch_merge $(branch_stable $(echo ${i#stable:}))
		;;
	*)
		branch_merge "$i"
		;;
	esac
done

# generate patches
notice "GENERATE PATCHES"
git format-patch -o $dir_cwd/$DIR_PATCHES -$patch_count HEAD || exit_error

# jump back to master
git checkout --force master

exit 0

# kate: syntax bash;
