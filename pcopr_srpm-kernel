#!/bin/bash

####
#
# Fedora COPR Kernel SRPM Generation Script
# Paul Moore <paul@paul-moore.com>
#

#
# COMMAND LINE OPTIONS
#
# -h            : help/usage information
# -f            : force the package to be built regardless of version conflict
# -r <revision> : package revision number (default = 1)
#

#
# REPO REQUIREMENTS
#
# > git remote -v
# fedora  git://pkgs.fedoraproject.org/kernel.git
#

#
# (c) Copyright Red Hat, 2015
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

####
# config

DIR_PATCHES=""
DIR_SRPMS=""

DIR_REPO_RPM=""
DIR_REPO_RPM_FIXES=""

PKG_VARIANT="secnext"

# load any configuration that may exist
[[ -r "pcopr.config" ]] && source ./pcopr.config

####
# functions

function msg() {
	echo -e "$*"
}

function notice() {
	msg ">>> $*"
}

function warn() {
	notice "WARNING: $*"
}

function exit_error() {
	if [[ -z $* ]]; then
		notice "ERROR: unknown error occurred"
	else
		notice "ERROR:" "$*"
	fi
	exit 2
}

function exit_usage() {
	msg "$0: [-h] [-f] [-r <revision>]"
	exit 1
}

function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		exit_error "install \"$1\" and include it in your \$PATH"
	fi
}

####
# main

# store our current working directory
dir_cwd=$(pwd)

#
# verify dependencies
#

[[ ! -d "$dir_cwd/$DIR_SRPMS" ]] && exit_error "srpms directory does not exist"
verify_deps git
verify_deps sed
verify_deps patch
verify_deps fedpkg

#
# option parsing
#

opt_force=0
opt_revision=1

while getopts ":hfr:" opt; do
	case "$opt" in
	f)
		opt_force=1
		;;
	r)
		opt_revision="$OPTARG"
		;;
	h|?)
		exit_usage
		;;
	esac
done

shift $(($OPTIND - 1));
cmd="$1"
shift

#
# generate the srpm
#

# jump to fedora repo
cd $DIR_REPO_RPM

# reset fedora repo
notice "RESET"
rm -f *.rpm
git clean -f -d
git checkout --force master || exit 2
git reset --hard || exit 2

# update fedora repo
notice "UPDATE"
git remote update || exit 2
git pull || exit 2

# create copr branch
notice "CREATE COPR BRANCH"
git branch --delete --force copr &> /dev/null # || exit 2
git checkout -b copr -t fedora/master || exit 2

# copy patches
notice "COPY KERNEL PATCHES"
cp $dir_cwd/$DIR_PATCHES/*.patch . || exit 2
ls -1 *-COPR-*.patch

# generate specfile snippet
notice "GENERATE SPECFILE PATCH REFERENCES"
cat /dev/null > copr.inc
for i in *-COPR-*.patch; do
	echo $(basename $i) | \
		echo "$(sed -e 's/\([0-9]\+\)\(-.*\)/Patch1\1:'/) $i" >> copr.inc  || exit 2
done
cat copr.inc

# patch kernel specfile
# NOTE: make a backup in kernel.spec.orig to make life easier
cp kernel.spec kernel.spec.orig
notice "PATCH KERNEL SPECFILE"
sed -i -e 's/^# define buildid .local/%define buildid .'$PKG_VARIANT'.'$opt_revision'/' kernel.spec  || exit 2
sed -i -e '/^# END OF PATCH DEFINITIONS/ r copr.inc' kernel.spec  || exit 2

# apply fixes
notice "FIXING KERNEL PACKAGE"
for i in ../$DIR_REPO_RPM_FIXES/*.patch; do
	if [[ -r "$i" ]]; then
		patch -p0 < "$i" || exit 2
	fi
done
# NOTE: make a backup in kernel.spec.copr to make life easier
cp kernel.spec kernel.spec.copr

# display the changes to the specfile
git diff kernel.spec

# test rpm prep stage
notice "TEST KERNEL RPM PREP STAGE"
fedpkg prep  || exit 2

# build srpm
notice "BUILD KERNEL SRPM"
fedpkg srpm  || exit 2

# store any srpms built
notice "TRANSFERING KERNEL SRPM"
for i in *.src.rpm; do
	if [[ -r $dir_cwd/$DIR_SRPMS/$i ]]; then
		if [[ $opt_force -eq 1 ]]; then
			warn "srpm $i already exits"
		else
			exit_error "srpm $i already exits"
		fi
	fi
	cp $i $dir_cwd/$DIR_SRPMS
	ls -l $dir_cwd/$DIR_SRPMS/$i
done

# jump back to master
git checkout --force master

exit 0

# kate: syntax bash;
