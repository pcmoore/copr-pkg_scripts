#!/bin/bash

####
#
# Fedora COPR Kernel SRPM Generation Script
# Paul Moore <paul@paul-moore.com>
#

#
# COMMAND LINE OPTIONS
#
# -h            : help/usage information
# -f            : force the package to be built regardless of version conflict
# -r <revision> : package revision number (default = 1)
#

#
# REPO REQUIREMENTS
#
# > git remote -v
# fedora  git://pkgs.fedoraproject.org/kernel.git
#

#
# (c) Copyright Red Hat, 2015
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

####
# config

USER_NAME=""
USER_EMAIL=""

COPR_USER=""
COPR_PROJECT=""
COPR_URL="https://copr.fedorainfracloud.org"

DIR_PATCHES="patches"
DIR_SRPMS="srpms"

DIR_REPO_RPM=""
DIR_REPO_RPM_FIXES=""

PKG_VARIANT=""

# load any configuration that may exist
[[ -r "pcopr.config" ]] && source ./pcopr.config

####
# functions

function msg() {
	echo -e "$*"
}

function notice() {
	msg ">>> $*"
}

function warn() {
	notice "WARNING: $*"
}

function exit_error() {
	if [[ -z $* ]]; then
		notice "ERROR: unknown error occurred"
	else
		notice "ERROR:" "$*"
	fi
	exit 2
}

function exit_usage() {
	msg "$0: [-h] [-f] [-b] [-B] [-t] [-V] [-r <revision>]"
	exit 1
}

function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		exit_error "install \"$1\" and include it in your \$PATH"
	fi
}

function specfile_version() {
	[[ -z "$1" || ! -r "$1" ]] && return
	sed -e '1,/^%changelog/d' "$1" | sed -n -e '/^*.* - .*/p' | \
		sed -n -e '1p' | sed -e 's/\(.*\) - \(.*\)/\2/'
}

function patch_cmd() {
	[[ -z "$1" ]] && return
	patch -N -p0 -f < "$1" || patch -N -p1 -f < "$1"
	return $?
}

####
# main

# store our current working directory
dir_cwd=$(pwd)

#
# verify dependencies
#

# verify tools
verify_deps git
verify_deps sed
verify_deps patch
verify_deps fedpkg
verify_deps copr-cli

# verify configuration
[[ -z $USER_NAME ]] && exit_error "USER_NAME is not set"
[[ -z $USER_EMAIL ]] && exit_error "USER_EMAIL is not set"
[[ -z $COPR_USER ]] && exit_error "COPR_USER is not set"
[[ -z $COPR_PROJECT ]] && exit_error "COPR_PROJECT is not set"
[[ -z $COPR_URL ]] && exit_error "COPR_URL is not set"
[[ -z $DIR_PATCHES ]] && exit_error "DIR_PATCHES is not set"
[[ -z $DIR_SRPMS ]] && exit_error "DIR_SRPMS is not set"
[[ -z $DIR_REPO_RPM ]] && exit_error "DIR_REPO_RPM is not set"
[[ -z $DIR_REPO_RPM_FIXES ]] && exit_error "DIR_REPO_RPM_FIXES is not set"
[[ -z $PKG_VARIANT ]] && exit_error "PKG_VARIANT is not set"

# verify filesystem
[[ ! -d "$dir_cwd/$DIR_SRPMS" ]] && exit_error "srpms directory does not exist"

#
# option parsing
#

opt_build=0
opt_scratchbuild=0
opt_force=0
opt_revision=1
opt_test=0
opt_version=0

while getopts ":bBhfr:tV" opt; do
	case "$opt" in
	b)
		opt_build=1
		;;
	B)
		opt_scratchbuild=1
		;;
	f)
		opt_force=1
		;;
	r)
		opt_revision="$OPTARG"
		;;
	t)
		opt_test=1
		;;
	V)
		opt_version=1
		;;
	h|?)
		exit_usage
		;;
	esac
done

shift $(($OPTIND - 1));
cmd="$1"
shift

#
# generate the srpm
#

# jump to fedora repo
cd $DIR_REPO_RPM

# reset fedora repo
notice "RESET"
rm -f *.rpm
git clean -f -d
git checkout --force master || exit_error
git reset --hard || exit_error

# reset any ignored directories as they are likely build directories
notice "RESET IGNORED DIRECTORIES"
ls -ld $(git status --ignored --porcelain | sed -n -e '/^\!\!.*\/$/p' |
	 sed -e 's/\!\![ \t]*\(.*\)\/$/\1/')
rm -rf $(git status --ignored --porcelain | sed -n -e '/^\!\!.*\/$/p' |
	 sed -e 's/\!\![ \t]*\(.*\)\/$/\1/')

# update fedora repo
notice "UPDATE"
git remote update || exit_error
git pull || exit_error

# create copr branch
notice "CREATE COPR BRANCH"
git branch --delete --force copr &> /dev/null # || exit_error
git checkout -b copr -t fedora/master || exit_error

# if we are just dumping the version information then do it and exit
if [[ $opt_version -eq 1 ]]; then
	echo "packge version: $(specfile_version kernel.spec).$PKG_VARIANT.$opt_revision"
	exit 0
fi

# copy patches (if patches are present)
notice "COPY KERNEL PATCHES"
if [[ -n $(ls $dir_cwd/$DIR_PATCHES/*.patch 2> /dev/null) ]]; then
	cp $dir_cwd/$DIR_PATCHES/*.patch . || exit_error
	ls -1 *-COPR-*.patch
fi

# generate specfile patch snippet (if patches are present)
notice "GENERATE SPECFILE PATCH REFERENCES"
if [[ -n $(ls $dir_cwd/$DIR_PATCHES/*.patch 2> /dev/null) ]]; then
	cat /dev/null > copr-patches.inc
	for i in *-COPR-*.patch; do
		echo $(basename $i) | \
			echo "$(sed -e 's/\([0-9]\+\)\(-.*\)/Patch1\1:'/) $i" >> copr-patches.inc  || exit_error
	done
	cat copr-patches.inc
fi

# generate specfile changelog snippet
cat /dev/null > copr-changelog.inc
echo "* $(date +"%a %b %d %Y") $USER_NAME <$USER_EMAIL> - $(specfile_version kernel.spec).$PKG_VARIANT.$opt_revision" >> copr-changelog.inc
echo "- automated build for $COPR_URL" >> copr-changelog.inc
echo "" >> copr-changelog.inc

# patch kernel specfile
# NOTE: make a backup in kernel.spec.orig to make life easier
cp kernel.spec kernel.spec.orig
notice "PATCH KERNEL SPECFILE"
sed -i -e 's/^# define buildid .local/%define buildid .'$PKG_VARIANT'.'$opt_revision'/' kernel.spec  || exit_error
sed -i -e '/^# END OF PATCH DEFINITIONS/ r copr-patches.inc' kernel.spec || exit_error

# make a note in the changelog
sed -i -e '/^%changelog/ r copr-changelog.inc' kernel.spec || exit_error

# apply fixes
notice "FIXING KERNEL PACKAGE"
for i in ../$DIR_REPO_RPM_FIXES/*.patch; do
	if [[ -r "$i" ]]; then
		patch_cmd "$i" || exit_error
	fi
done
# NOTE: make a backup in kernel.spec.copr to make life easier
cp kernel.spec kernel.spec.copr

# display the changes to the specfile
git diff kernel.spec

# test rpm prep stage
notice "TEST KERNEL RPM PREP STAGE"
fedpkg prep  || exit_error

# if we are just doing a test run then exit here
[[ $opt_test -eq 1 ]] && exit 0

# build srpm
notice "BUILD KERNEL SRPM"
fedpkg srpm  || exit_error

# store any srpms built
notice "TRANSFERING KERNEL SRPM"
for i in *.src.rpm; do
	if [[ -r $dir_cwd/$DIR_SRPMS/$i ]]; then
		if [[ $opt_force -eq 1 ]]; then
			warn "srpm $i already exits"
		else
			exit_error "srpm $i already exits"
		fi
	fi
	cp $i $dir_cwd/$DIR_SRPMS
	ls -l $dir_cwd/$DIR_SRPMS/$i
done

# attempt any copr builds
if [[ $opt_scratchbuild -eq 1 ]]; then
	notice "SCRATCH BUILDING KERNEL SRPM"
	for i in *.src.rpm; do
		fedpkg scratch-build --srpm=$i
	done
fi
if [[ $opt_build -eq 1 ]]; then
	notice "BUILDING KERNEL SRPM"
	for i in *.src.rpm; do
		copr-cli build --nowait $COPR_USER/$COPR_PROJECT $i
	done
fi

# jump back to master
git checkout --force master

exit 0

# kate: syntax bash;
